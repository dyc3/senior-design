classDiagram
    class Balancer {
        ctx: Arc~RwLock~BalancerContext~~
        ...[channels for receiving new nodes, and messages]

        new_link(): BalancerLink
        dispatch_loop()
    }

    class MonolithDiscoverer{
        <<trait>>
    }

    class MonolithConnectionManager {
        link: BalancerLink
    }

    MonolithDiscoverer "1" --> "1" MonolithConnectionManager : sends connection configs
    MonolithConnectionManager "1" --> "1" BalancerLink : sends new monolith websockets via

    class BalancerService {
        ctx: Arc~RwLock~BalancerContext~~
        link: BalancerLink
    }
    note for BalancerService "Handles HTTP"

    BalancerService "1" --> "1" BalancerLink : sends new client websockets via

    class BalancerLink {
        new_client_tx
        client_msg_tx
        new_monolith_tx
        monolith_msg_tx
    }

    class NewMonolith {
        monolith_id: MonolithId
    }

    class MonolithSelection {
        <<trait>>
    }

    MonolithSelection "1" --> "1" BalancerContext : selects monoliths

    class BalancerContext {
        clients: HashMap~ClientId-BalancerClient~,
        monoliths: HashMap~MonolithId-BalancerMonolith~,
        rooms_to_monoliths: HashMap~RoomName-MonolithId~,
        monoliths_by_region: HashMap~String-Vec~MonolithId~~,
        monolith_selection: Box~MonolithSelection~,
    }

    Balancer "1" *-- "1" BalancerContext
    BalancerLink "1" <--> "1" Balancer : sends inbound msgs via channels,\nreceives channel Receivers for outbound msgs

    class BalancerMonolith {
        monolith_id: MonolithId
        rooms: Hashmap~RoomName-Room~
    }

    class Room {
        name: RoomName
        clients: Vec~ClientId~
    }

    BalancerMonolith "1" o-- "0..*" Room : Collects

    class BalancerClient {
        client_id: ClientId
        room: RoomName
        token: String
    }

    NewMonolith "1" --> "1" BalancerMonolith : consumed to create
    BalancerContext "1" o-- "0..*" BalancerMonolith : collects
    BalancerContext "1" o-- "0..*" BalancerClient : collects

    class UnauthorizedClient {
        client_id: ClientId
        room: RoomName
    }
    class NewClient {
        client_id: ClientId
        room: RoomName
        token: String
    }

    UnauthorizedClient --> NewClient : when auth token received
    NewClient --> BalancerClient : consumed to create

    Balancer --> UnauthorizedClient : create upon websocket
    Balancer --> NewMonolith : create upon websocket