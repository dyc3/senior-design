classDiagram
    class BalancerManager {
        - balancerConnections: BalancerConnection[]
        - bus: EventEmitter
        + addBalancerConnection(conn: BalancerConnection): void
        + getConnection(id: string): BalancerConnection | undefined
        - onBalancerConnect(conn: BalancerConnection): void
        - onBalancerDisconnect(conn: BalancerConnection, code: number, reason: string): void
        - onBalancerMessage(conn: BalancerConnection, message: MsgB2M): void
        - onBalancerError(conn: BalancerConnection, error: WebSocket.ErrorEvent): void
        + on(event: BalancerManagerEvents, handler: BalancerManagerEventHandlers): void
        - emit(event: BalancerManagerEvents, ...args: any[]): void
    }

    class BalancerConnection {
        <<abstract>>
        - id: string
        - bus: EventEmitter
        + send(message: MsgM2B): Result<void, Error>
        + disconnect(): Result<void, Error>
        - emit(event: BalancerConnectionEvents, ...args: any[]): void
        + on(event: BalancerConnectionEvents, handler: BalancerConnectionEventHandlers): void
    }

    class BalancerConnectionReal {
        - socket: WebSocket
        + readyState: number
        + send(message: MsgM2B): Result<void, Error>
        - onSocketConnect(event: WebSocket.OpenEvent): void
        - onSocketDisconnect(code: number, reason: string): void
        - onSocketMessage(data: WebSocket.Data): void
        - onSocketError(event: WebSocket.ErrorEvent): void
    }

    class EventEmitter {

    }

    class WebSocket {
        
    }



    BalancerManager --|> EventEmitter
    BalancerConnection --|> EventEmitter
    BalancerConnectionReal --|> BalancerConnection : implements
    BalancerConnectionReal --> WebSocket
    BalancerManager "1" --o "*" BalancerConnection : contains
