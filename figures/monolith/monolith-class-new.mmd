classDiagram
    class Monolith {
        <<service>>
    }

    Monolith "1" --> "1" RoomManager: starts
    Monolith "1" --> "1" ClientManager: starts

    class Redis {
        <<service>>
    }

    class RoomManager {
        Room[] room
        EventEmitter bus
    }

    RoomManager "1" o-- "0..*" Room: collects

    class Room {
        String name
        bool isTemporary
        RoomUser[] users
        ...
    }

    class ClientManager {
        Client[] connections
        Map roomJoins
        Option~WebSocket~ balancer
    }

    RoomManager <-- ClientManager: via direct function calls
    RoomManager --> ClientManager: via event bus
    ClientManager --> Redis: connects to

    class Client {
        <<abstract>>
        String id
        String room
        AuthToken token
        SessionInfo session
        ClientJoinStatus joinStatus
        EventEmitter bus
    }

    ClientManager "1" o-- "0..*" Client: collects

    class RoomUser {
        String id
        AuthToken token
    }

    Room "1" o-- "0..*" RoomUser: collects
    RoomUser "1" <.. "1" Client: represented by

    class DirectClient {
        WebSocket socket
    }

    class BalancerClient {
    }

    DirectClient --|> Client: inherits
    BalancerClient --|> Client: inherits
    note for DirectClient "client that connected\ndirectly to the Monolith"
    note for BalancerClient "client that connected\nvia a Balancer"

    class Balancer {
        <<service>>
    }

    Balancer --> ClientManager: connects to
